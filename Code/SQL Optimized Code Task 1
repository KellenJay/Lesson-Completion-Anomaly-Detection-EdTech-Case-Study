-- Identifing users whose first data-analyst lesson was in April 2020
WITH user_first_lesson AS (
    SELECT 
        fl.user_id,
        MIN(fl.date_created) AS lesson_datetime
    FROM finished_lesson_test fl
    JOIN lesson_index_test li ON fl.lesson_id = li.lesson_id
    WHERE li.profession_name = 'data-analyst' 
    GROUP BY fl.user_id
),
april_cohort AS (
    SELECT user_id
    FROM user_first_lesson
    WHERE lesson_datetime BETWEEN '2020-04-01' AND '2020-04-30'
),
-- Finding the fast lesson completions for this cohort
ranked_lessons AS (
    SELECT 
        fl.user_id,
        fl.lesson_id,
        DATETRUNC(SECOND, fl.date_created) AS date_created,
        li.profession_name,
        DATETRUNC(SECOND, LEAD(fl.date_created) OVER (
            PARTITION BY fl.user_id, li.profession_name ORDER BY fl.date_created
        )) AS next_lesson_datetime
    FROM finished_lesson_test fl
    JOIN lesson_index_test li ON fl.lesson_id = li.lesson_id
    WHERE li.profession_name = 'data-analyst'
      AND fl.user_id IN (SELECT user_id FROM april_cohort)
)
SELECT
	DATEDIFF(SECOND, date_created, next_lesson_datetime) AS delta_seconds,
	date_created AS lesson_datetime,
    lesson_id,
    next_lesson_datetime,
	profession_name,
	user_id
FROM ranked_lessons
WHERE next_lesson_datetime IS NOT NULL
    AND DATEDIFF(SECOND, date_created, next_lesson_datetime) < 5

====================================================================================================================
-- Calculates the percentage of lesson completions flagged as suspicious; under 5 seconds.
SELECT
    (SELECT COUNT(*) FROM april_cohort) AS total_april_users,
    COUNT(*) AS total_lesson_pairs,
    SUM(CASE WHEN delta_seconds < 5 THEN 1 ELSE 0 END) AS suspicious_completions,
    ROUND(100.0 * SUM(CASE WHEN delta_seconds < 5 THEN 1 ELSE 0 END) / COUNT(*), 2) AS percent_suspicious
FROM lesson_deltas;

====================================================================================================================
-- Identifing users whose first data-analyst lesson was in April 2020
WITH user_first_lesson AS (
    SELECT 
        fl.user_id,
        MIN(fl.date_created) AS lesson_datetime
    FROM finished_lesson_test fl
    JOIN lesson_index_test li ON fl.lesson_id = li.lesson_id
    WHERE li.profession_name = 'data-analyst' 
    GROUP BY fl.user_id
),
april_cohort AS (
    SELECT user_id
    FROM user_first_lesson
    WHERE lesson_datetime BETWEEN '2020-04-01' AND '2020-04-30'
),
-- Finding the fast lesson completions for this cohort between 6-60 secs
ranked_lessons AS (
    SELECT 
        fl.user_id,
        fl.lesson_id,
        fl.date_created,
        li.profession_name,
        LEAD(fl.date_created) OVER (
            PARTITION BY fl.user_id, li.profession_name ORDER BY fl.date_created
        ) AS next_lesson_datetime
    FROM finished_lesson_test fl
    JOIN lesson_index_test li ON fl.lesson_id = li.lesson_id
    WHERE li.profession_name = 'data-analyst'
      AND fl.user_id IN (SELECT user_id FROM april_cohort)
),
lesson_deltas AS (
    SELECT
        user_id,
        lesson_id,
        date_created,
        next_lesson_datetime,
        DATEDIFF(SECOND, date_created, next_lesson_datetime) AS delta_seconds,
		DATEDIFF(HOUR, date_created, next_lesson_datetime) AS delta_hours
    FROM ranked_lessons
    WHERE next_lesson_datetime IS NOT NULL
)
SELECT
    ROUND(AVG(CAST(delta_seconds AS FLOAT)), 1) AS avg_seconds_between_lessons,
    ROUND(AVG(CAST(delta_hours AS FLOAT)), 1) AS avg_hours_between_lessons,
    COUNT(*) AS total_lesson_pairs,
    SUM(CASE WHEN delta_seconds < 5 THEN 1 ELSE 0 END) AS under_5s,
    SUM(CASE WHEN delta_seconds BETWEEN 5 AND 30 THEN 1 ELSE 0 END) AS between_5_30s,
    SUM(CASE WHEN delta_seconds BETWEEN 31 AND 60 THEN 1 ELSE 0 END) AS between_31_60s,
    SUM(CASE WHEN delta_seconds > 60 THEN 1 ELSE 0 END) AS over_60s
FROM lesson_deltas

====================================================================================================================
-- Creating view for 'completions' for reusibility
IF OBJECT_ID('vw_completions', 'V') IS NOT NULL
    DROP VIEW vw_completions;
GO

CREATE VIEW vw_completions AS
SELECT 
    fl.user_id,
    fl.lesson_id,
    fl.date_created,
    li.lesson_name,  
    li.profession_name,
    LEAD(fl.date_created) OVER (
        PARTITION BY fl.user_id, li.profession_name ORDER BY fl.date_created
    ) AS next_lesson_datetime
FROM finished_lesson_test fl
JOIN lesson_index_test li ON fl.lesson_id = li.lesson_id;

====================================================================================================================
-- Creating view for 'lesson_deltas' for reusibility
IF OBJECT_ID('vw_lesson_deltas', 'V') IS NOT NULL
    DROP VIEW vw_lesson_deltas;
GO

CREATE VIEW vw_lesson_deltas AS
SELECT
    user_id,
    lesson_id,
    lesson_name, 
    profession_name,
    date_created AS lesson_datetime,
    next_lesson_datetime,
    DATEDIFF(SECOND, date_created, next_lesson_datetime) AS delta_seconds
FROM vw_completions
WHERE next_lesson_datetime IS NOT NULL;

====================================================================================================================
-- Exploring bugs under 5 seconds across ALL professions
SELECT
    profession_name,
    COUNT(*) AS total_lesson_pairs,
    SUM(CASE WHEN delta_seconds < 5 THEN 1 ELSE 0 END) AS under_5s,
    SUM(CASE WHEN delta_seconds BETWEEN 5 AND 30 THEN 1 ELSE 0 END) AS between_5_30s,
    SUM(CASE WHEN delta_seconds BETWEEN 31 AND 60 THEN 1 ELSE 0 END) AS between_31_60s,
    SUM(CASE WHEN delta_seconds > 60 THEN 1 ELSE 0 END) AS over_60s
FROM vw_lesson_deltas
GROUP BY profession_name
ORDER BY under_5s DESC;

====================================================================================================================
--Flagging buggy behaviour (Dashboard Report)
SELECT
    profession_name,
    user_id,
    lesson_id,
	lesson_name,
    DATETRUNC(SECOND, lesson_datetime) AS lesson_datetime,
    DATETRUNC(SECOND, next_lesson_datetime) AS next_lesson_datetime,
    DATEDIFF(SECOND, lesson_datetime, next_lesson_datetime) AS delta_seconds,
    CASE
        WHEN DATEDIFF(SECOND, lesson_datetime, next_lesson_datetime) < 5 THEN 'BUG_FLAG'
        WHEN DATEDIFF(SECOND, lesson_datetime, next_lesson_datetime) BETWEEN 5 AND 60 THEN 'REVIEW_FLAG'
        ELSE 'NORMAL'
    END AS completion_flag
FROM vw_lesson_deltas 
ORDER BY lesson_datetime
